# Generated by Django 5.0.6 on 2024-05-08 10:36

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Communication",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rf_communication",
                    models.BooleanField(
                        default=False, help_text="Presence of RF communication"
                    ),
                ),
                (
                    "gsm_communication",
                    models.BooleanField(
                        default=False, help_text="Presence of GSM communication"
                    ),
                ),
                (
                    "wifi_communication",
                    models.BooleanField(
                        default=False, help_text="Presence of WiFi communication"
                    ),
                ),
                (
                    "bluetooth_communication",
                    models.BooleanField(
                        default=False, help_text="Presence of Bluetooth communication"
                    ),
                ),
                (
                    "ir_communication",
                    models.BooleanField(
                        default=False, help_text="Presence of IR communication"
                    ),
                ),
                (
                    "satellite_communication",
                    models.BooleanField(
                        default=False, help_text="Presence of satellite communication"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DurabilityAndDesign",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "weather_resistant",
                    models.BooleanField(
                        default=False, help_text="Weather-resistant design"
                    ),
                ),
                (
                    "modular_design",
                    models.BooleanField(default=False, help_text="Modular design"),
                ),
                (
                    "portability",
                    models.BooleanField(default=False, help_text="Portability feature"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Functionality",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "autonomous_flight",
                    models.BooleanField(
                        default=False, help_text="Autonomous flight capability"
                    ),
                ),
                (
                    "mapping_and_processing",
                    models.BooleanField(
                        default=False,
                        help_text="Mapping and image processing capability",
                    ),
                ),
                (
                    "package_delivery",
                    models.BooleanField(
                        default=False, help_text="Package delivery capability"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Propulsion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "propeller",
                    models.BooleanField(
                        default=False,
                        help_text="Presence of propeller propulsion system",
                    ),
                ),
                (
                    "jet_engine",
                    models.BooleanField(
                        default=False,
                        help_text="Presence of jet engine propulsion system",
                    ),
                ),
                (
                    "turboprop_engine",
                    models.BooleanField(
                        default=False,
                        help_text="Presence of turboprop engine propulsion system",
                    ),
                ),
                (
                    "internal_combustion_engine",
                    models.BooleanField(
                        default=False,
                        help_text="Presence of internal combustion engine propulsion system",
                    ),
                ),
                (
                    "electric_motor",
                    models.BooleanField(
                        default=False,
                        help_text="Presence of electric motor propulsion system",
                    ),
                ),
                (
                    "rocket_engine",
                    models.BooleanField(
                        default=False,
                        help_text="Presence of rocket engine propulsion system",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Security",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "collision_detection",
                    models.BooleanField(
                        default=False, help_text="Collision detection feature"
                    ),
                ),
                (
                    "emergency_landing",
                    models.BooleanField(
                        default=False, help_text="Emergency landing feature"
                    ),
                ),
                (
                    "restricted_flight_zones",
                    models.BooleanField(
                        default=False, help_text="Restricted flight zones feature"
                    ),
                ),
                (
                    "data_encryption",
                    models.BooleanField(
                        default=False, help_text="Data encryption feature"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Sensors",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "thermal_camera",
                    models.BooleanField(
                        default=False, help_text="Presence of thermal camera"
                    ),
                ),
                (
                    "lidar",
                    models.BooleanField(
                        default=False, help_text="Presence of LiDAR sensor"
                    ),
                ),
                (
                    "accelerometer",
                    models.BooleanField(
                        default=False, help_text="Presence of accelerometer"
                    ),
                ),
                (
                    "gyroscope",
                    models.BooleanField(
                        default=False, help_text="Presence of gyroscope"
                    ),
                ),
                (
                    "magnetometer",
                    models.BooleanField(
                        default=True, help_text="Presence of Magnetometer sensor"
                    ),
                ),
                (
                    "air_quality",
                    models.BooleanField(
                        default=True, help_text="Presence of Air Quality sensor"
                    ),
                ),
                (
                    "ultrasonic",
                    models.BooleanField(
                        default=True, help_text="Presence of Ultrasonic sensor"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UAV",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "serial_number",
                    models.CharField(
                        help_text="Unique identifier of the UAV",
                        max_length=16,
                        unique=True,
                    ),
                ),
                (
                    "brand",
                    models.CharField(help_text="Brand of the UAV", max_length=100),
                ),
                (
                    "model",
                    models.CharField(help_text="Model of the UAV", max_length=100),
                ),
                ("year", models.PositiveSmallIntegerField()),
                ("weight", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "max_range",
                    models.FloatField(help_text="Maximum range in kilometers"),
                ),
                (
                    "max_speed",
                    models.FloatField(help_text="Maximum speed in kilometers per hour"),
                ),
                (
                    "max_flight_time",
                    models.IntegerField(help_text="Maximum flight time in minutes"),
                ),
                (
                    "max_payload_capacity",
                    models.FloatField(
                        help_text="Maximum payload capacity of the UAV in kilograms"
                    ),
                ),
                (
                    "daily_rental_fee",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "availability",
                    models.BooleanField(
                        default=True, help_text="Availability status of the UAV"
                    ),
                ),
                (
                    "navigation_type",
                    models.CharField(
                        choices=[
                            ("GPS", "GPS (Global Positioning System)"),
                            ("INS", "INS (Inertial Navigation System)"),
                            ("RTK", "RTK (Real-Time Kinematic)"),
                            ("LIDAR", "LIDAR (Light Detection and Ranging)"),
                            ("Cameras", "Cameras and Computer Vision"),
                            ("Barometer", "Barometer"),
                        ],
                        help_text="Navigation system used by the UAV",
                        max_length=100,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("Military", "Military Usage"),
                            ("Commercial", "Commercial and Industrial Usage"),
                            ("Civil", "Civil Usage"),
                            ("Research", "Research and Development"),
                            ("Emergency", "Emergency and Rescue"),
                            ("Training", "Training and Simulation"),
                            ("Transport", "Transport and Delivery"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "communication_system",
                    models.OneToOneField(
                        blank=True,
                        help_text="Communication system used by the UAV",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="uav.communication",
                    ),
                ),
                (
                    "durability_and_design",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="uav.durabilityanddesign",
                    ),
                ),
                (
                    "functionality",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="uav.functionality",
                    ),
                ),
                (
                    "propulsion_system",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="uav.propulsion",
                    ),
                ),
                (
                    "security",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="uav.security",
                    ),
                ),
                (
                    "sensors",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="uav.sensors",
                    ),
                ),
            ],
        ),
    ]
